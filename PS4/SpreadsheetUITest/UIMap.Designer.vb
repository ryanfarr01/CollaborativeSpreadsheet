'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 12.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace SpreadsheetUITest
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''Ensures the Help Menu does not throw any exceptions. These methods have no effect beyond simply displaying their message.
        '''</summary>
        Public Sub HelpMenuTest()
            Dim uISelectNewCellMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UISelectNewCellMenuItem
            Dim uIOKButton As WinButton = Me.UIOKWindow.UIOKButton
            Dim uIEditCellContentsMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIEditCellContentsMenuItem
            Dim uIUndoRedoMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIUndoRedoMenuItem
            Dim uICloseButton As WinButton = Me.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton

            'Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            Dim uISpreadsheetWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.HelpMenuTestParams.UISpreadsheetWindowExePath, Me.HelpMenuTestParams.UISpreadsheetWindowAlternateExePath)

            'Click 'Help' -> 'Select New Cell' menu item
            Mouse.Click(uISelectNewCellMenuItem, New Point(49, 4))

            'Click 'OK' button
            Mouse.Click(uIOKButton, New Point(66, 17))

            'Click 'Help' -> 'Edit Cell Contents' menu item
            Mouse.Click(uIEditCellContentsMenuItem, New Point(45, 4))

            'Click 'OK' button
            Mouse.Click(uIOKButton, New Point(57, 9))

            'Click 'Help' -> 'Undo/Redo' menu item
            Mouse.Click(uIUndoRedoMenuItem, New Point(57, 10))

            'Click 'OK' button
            Mouse.Click(uIOKButton, New Point(54, 10))

            'Click 'Close' button
            Mouse.Click(uICloseButton, New Point(16, 9))
        End Sub
        
        '''<summary>
        '''InputDouble - Use 'InputDoubleParams' to pass parameters into this method.
        '''</summary>
        Public Sub InputDouble()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            Dim uISpreadsheetWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.InputDoubleParams.UISpreadsheetWindowExePath, Me.InputDoubleParams.UISpreadsheetWindowAlternateExePath)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(228, 98))

            'Type '1' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.InputDoubleParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None)

            'Type '1' in text box
            uIItemEdit.Text = Me.InputDoubleParams.UIItemEditText

            'Type '{Right}{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.InputDoubleParams.UIItemEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''InputString - Use 'InputStringParams' to pass parameters into this method.
        '''</summary>
        Public Sub InputString()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(303, 94))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.InputStringParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None)

            'Type 'test' in text box
            uIItemEdit.Text = Me.InputStringParams.UIItemEditText

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.InputStringParams.UIItemEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''InputFormula - Use 'InputFormulaParams' to pass parameters into this method.
        '''</summary>
        Public Sub InputFormula()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(390, 102))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.InputFormulaParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None)

            'Type '=C4+1' in text box
            uIItemEdit.Text = Me.InputFormulaParams.UIItemEditText

            'Click text box
            Mouse.Click(uIItemEdit, New Point(148, 4))

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.InputFormulaParams.UIItemEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''InputFormulaError - Use 'InputFormulaErrorParams' to pass parameters into this method.
        '''</summary>
        Public Sub InputFormulaError()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(460, 101))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.InputFormulaErrorParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None)

            'Type '=' in text box
            uIItemEdit.Text = Me.InputFormulaErrorParams.UIItemEditText

            'Type '=D4+1' in text box
            uIItemEdit.Text = Me.InputFormulaErrorParams.UIItemEditText1

            'Click text box
            Mouse.Click(uIItemEdit, New Point(101, 14))

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.InputFormulaErrorParams.UIItemEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''Closes the spreadsheet
        '''</summary>
        Public Sub CloseSpreadsheet()
            Dim uICloseButton As WinButton = Me.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton

            'Click 'Close' button
            Mouse.Click(uICloseButton, New Point(24, 4))
        End Sub
        
        '''<summary>
        '''AssertDoubleCheck - Use 'AssertDoubleCheckExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub AssertDoubleCheck()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit
            Dim uICellValue1Text As WinText = Me.UISpreadsheetWindow.UIToolStrip1ToolBar.UICellValue1Text
            Dim uICellSelectedC4Text As WinText = Me.UISpreadsheetWindow.UIToolStrip1ToolBar.UICellSelectedC4Text

            'Verify that the 'Text' property of text box equals '1'
            Assert.AreEqual(Me.AssertDoubleCheckExpectedValues.UIItemEditText, uIItemEdit.Text, "Double Content Failure")

            'Verify that the 'Name' property of 'Cell Value: 1' label equals 'Cell Value: 1'
            Assert.AreEqual(Me.AssertDoubleCheckExpectedValues.UICellValue1TextName, uICellValue1Text.Name)

            'Verify that the 'Name' property of 'Cell Selected: C4' label equals 'Cell Selected: C4'
            Assert.AreEqual(Me.AssertDoubleCheckExpectedValues.UICellSelectedC4TextName, uICellSelectedC4Text.Name)
        End Sub
        
        '''<summary>
        '''AssertStringCheck - Use 'AssertStringCheckExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub AssertStringCheck()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit
            Dim uICellValuetestText As WinText = Me.UISpreadsheetWindow.UIToolStrip1ToolBar.UICellValuetestText
            Dim uICellSelectedD4Text As WinText = Me.UISpreadsheetWindow.UIToolStrip1ToolBar.UICellSelectedD4Text

            'Verify that the 'Text' property of text box equals 'test'
            Assert.AreEqual(Me.AssertStringCheckExpectedValues.UIItemEditText, uIItemEdit.Text)

            'Verify that the 'Name' property of 'Cell Value: test' label equals 'Cell Value: test'
            Assert.AreEqual(Me.AssertStringCheckExpectedValues.UICellValuetestTextName, uICellValuetestText.Name)

            'Verify that the 'Name' property of 'Cell Selected: D4' label equals 'Cell Selected: D4'
            Assert.AreEqual(Me.AssertStringCheckExpectedValues.UICellSelectedD4TextName, uICellSelectedD4Text.Name)
        End Sub
        
        '''<summary>
        '''AssertFormulaCheck - Use 'AssertFormulaCheckExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub AssertFormulaCheck()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit
            Dim uICellValue2Text As WinText = Me.UISpreadsheetWindow.UIToolStrip1ToolBar.UICellValue2Text
            Dim uICellSelectedE4Text As WinText = Me.UISpreadsheetWindow.UIToolStrip1ToolBar.UICellSelectedE4Text

            'Verify that the 'Text' property of text box equals '=C4+1'
            Assert.AreEqual(Me.AssertFormulaCheckExpectedValues.UIItemEditText, uIItemEdit.Text)

            'Verify that the 'Name' property of 'Cell Value: 2' label equals 'Cell Value: 2'
            Assert.AreEqual(Me.AssertFormulaCheckExpectedValues.UICellValue2TextName, uICellValue2Text.Name)

            'Verify that the 'Name' property of 'Cell Selected: E4' label equals 'Cell Selected: E4'
            Assert.AreEqual(Me.AssertFormulaCheckExpectedValues.UICellSelectedE4TextName, uICellSelectedE4Text.Name)
        End Sub
        
        '''<summary>
        '''AssertFormulaErrorCheck - Use 'AssertFormulaErrorCheckExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub AssertFormulaErrorCheck()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit
            Dim uIInvalidFormulaText As WinText = Me.UISpreadsheetWindow.UIToolStrip1ToolBar.UIInvalidFormulaText
            Dim uICellSelectedF4Text As WinText = Me.UISpreadsheetWindow.UIToolStrip1ToolBar.UICellSelectedF4Text

            'Verify that the 'Text' property of text box equals '=D4+1'
            Assert.AreEqual(Me.AssertFormulaErrorCheckExpectedValues.UIItemEditText, uIItemEdit.Text)

            'Verify that the 'Name' property of 'Invalid Formula' label equals 'Invalid Formula'
            Assert.AreEqual(Me.AssertFormulaErrorCheckExpectedValues.UIInvalidFormulaTextName, uIInvalidFormulaText.Name)

            'Verify that the 'Name' property of 'Cell Selected: F4' label equals 'Cell Selected: F4'
            Assert.AreEqual(Me.AssertFormulaErrorCheckExpectedValues.UICellSelectedF4TextName, uICellSelectedF4Text.Name)
        End Sub
        
        '''<summary>
        '''MenuNewClose - Use 'MenuNewCloseParams' to pass parameters into this method.
        '''</summary>
        Public Sub MenuNewClose()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit
            Dim uINewMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem
            Dim uISpreadsheetPanel1Client2 As WinClient = Me.UISpreadsheetWindow1.UIItemWindow.UISpreadsheetPanel1Client
            Dim uICloseButton As WinButton = Me.UISpreadsheetWindow1.UISpreadsheetTitleBar.UICloseButton
            Dim uICloseMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem
            Dim uIYesButton As WinButton = Me.UIDataLossWarningWindow.UIYesWindow.UIYesButton

            'Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            Dim uISpreadsheetWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.MenuNewCloseParams.UISpreadsheetWindowExePath, Me.MenuNewCloseParams.UISpreadsheetWindowAlternateExePath)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(219, 100))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.MenuNewCloseParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None)

            'Type '=1+1' in text box
            uIItemEdit.Text = Me.MenuNewCloseParams.UIItemEditText

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.MenuNewCloseParams.UIItemEditSendKeys, ModifierKeys.None)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(321, 97))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(239, 100))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.MenuNewCloseParams.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None)

            'Type 'ttest' in text box
            uIItemEdit.Text = Me.MenuNewCloseParams.UIItemEditText1

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.MenuNewCloseParams.UIItemEditSendKeys1, ModifierKeys.None)

            'Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, New Point(32, 8))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client2, New Point(549, 211))

            'Click 'Close' button
            Mouse.Click(uICloseButton, New Point(36, 10))

            'Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, New Point(49, 13))

            'Click '&Yes' button
            Mouse.Click(uIYesButton, New Point(37, 20))
        End Sub
        
        '''<summary>
        '''undoRedoTestPart1 - Use 'undoRedoTestPart1Params' to pass parameters into this method.
        '''</summary>
        Public Sub undoRedoTestPart1()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            Dim uISpreadsheetWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.undoRedoTestPart1Params.UISpreadsheetWindowExePath, Me.undoRedoTestPart1Params.UISpreadsheetWindowAlternateExePath)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(205, 101))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.undoRedoTestPart1Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None)

            'Type 'test' in text box
            uIItemEdit.Text = Me.undoRedoTestPart1Params.UIItemEditText

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.undoRedoTestPart1Params.UIItemEditSendKeys, ModifierKeys.None)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(329, 105))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.undoRedoTestPart1Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None)

            'Type 'test2' in text box
            uIItemEdit.Text = Me.undoRedoTestPart1Params.UIItemEditText1

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.undoRedoTestPart1Params.UIItemEditSendKeys1, ModifierKeys.None)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(386, 102))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(308, 97))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.undoRedoTestPart1Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None)

            'Type 'test3' in text box
            uIItemEdit.Text = Me.undoRedoTestPart1Params.UIItemEditText2

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.undoRedoTestPart1Params.UIItemEditSendKeys2, ModifierKeys.None)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(387, 107))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.undoRedoTestPart1Params.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None)

            'Type 'test4' in text box
            uIItemEdit.Text = Me.undoRedoTestPart1Params.UIItemEditText3

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.undoRedoTestPart1Params.UIItemEditSendKeys3, ModifierKeys.None)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(326, 98))
        End Sub
        
        '''<summary>
        '''undoRedoAssertPart1 - Use 'undoRedoAssertPart1ExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub undoRedoAssertPart1()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Verify that the 'Text' property of text box equals 'test3'
            Assert.AreEqual(Me.undoRedoAssertPart1ExpectedValues.UIItemEditText, uIItemEdit.Text)
        End Sub
        
        '''<summary>
        '''undoRedoTestPart2 - Use 'undoRedoTestPart2Params' to pass parameters into this method.
        '''</summary>
        Public Sub undoRedoTestPart2()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(379, 95))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(321, 97))

            'Type 'Control + z' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.undoRedoTestPart2Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.Control)

            'Type 'Control + z' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.undoRedoTestPart2Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.Control)
        End Sub
        
        '''<summary>
        '''undoRedoAssertPart2 - Use 'undoRedoAssertPart2ExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub undoRedoAssertPart2()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Verify that the 'Text' property of text box equals 'test2'
            Assert.AreEqual(Me.undoRedoAssertPart2ExpectedValues.UIItemEditText, uIItemEdit.Text)
        End Sub
        
        '''<summary>
        '''undoRedoTestPart3 - Use 'undoRedoTestPart3Params' to pass parameters into this method.
        '''</summary>
        Public Sub undoRedoTestPart3()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(373, 101))

            'Type 'Control + y' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.undoRedoTestPart3Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.Control)

            'Type 'Control + y' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.undoRedoTestPart3Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.Control)
        End Sub
        
        '''<summary>
        '''undoRedoAssertPart3 - Use 'undoRedoAssertPart3ExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub undoRedoAssertPart3()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Verify that the 'Text' property of text box equals 'test4'
            Assert.AreEqual(Me.undoRedoAssertPart3ExpectedValues.UIItemEditText, uIItemEdit.Text)
        End Sub
        
        '''<summary>
        '''undoRedoClose
        '''</summary>
        Public Sub undoRedoClose()
            Dim uICloseButton As WinButton = Me.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton

            'Click 'Close' button
            Mouse.Click(uICloseButton, New Point(26, 9))
        End Sub
        
        '''<summary>
        '''saveLoadTestPart1 - Use 'saveLoadTestPart1Params' to pass parameters into this method.
        '''</summary>
        Public Sub saveLoadTestPart1()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit
            Dim uISaveMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem
            Dim uIFilenameComboBox As WinComboBox = Me.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox
            Dim uIFilenameEdit As WinEdit = Me.UISaveAsWindow.UIItemWindow1.UIFilenameEdit
            Dim uIYesButton As WinButton = Me.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton
            Dim uIYesButton1 As WinButton = Me.UIOverwriteWarningWindow.UIYesWindow.UIYesButton

            'Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            Dim uISpreadsheetWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.saveLoadTestPart1Params.UISpreadsheetWindowExePath, Me.saveLoadTestPart1Params.UISpreadsheetWindowAlternateExePath)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(218, 97))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.saveLoadTestPart1Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None)

            'Type 'test1' in text box
            uIItemEdit.Text = Me.saveLoadTestPart1Params.UIItemEditText

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.saveLoadTestPart1Params.UIItemEditSendKeys, ModifierKeys.None)

            'Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, New Point(55, 8))

            'Select 'savetest' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = Me.saveLoadTestPart1Params.UIFilenameComboBoxEditableItem

            'Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, Me.saveLoadTestPart1Params.UIFilenameEditSendKeys, ModifierKeys.None)

            'Click '&Yes' button
            Mouse.Click(uIYesButton, New Point(22, 7))

            'Click '&Yes' button
            Mouse.Click(uIYesButton1, New Point(46, 10))
        End Sub
        
        '''<summary>
        '''saveLoadTestPart2 - Use 'saveLoadTestPart2Params' to pass parameters into this method.
        '''</summary>
        Public Sub saveLoadTestPart2()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uISpreadsheetPanel1Client1 As WinClient = Me.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(599, 177))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(232, 102))

            'Type 't' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, Me.saveLoadTestPart2Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None)

            'Type 'test2' in text box
            uIItemEdit.Text = Me.saveLoadTestPart2Params.UIItemEditText

            'Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, Me.saveLoadTestPart2Params.UIItemEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''saveLoadTestPart3
        '''</summary>
        Public Sub saveLoadTestPart3()
            Dim uIOpenMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem
            Dim uIYesButton As WinButton = Me.UIDataLossWarningWindow.UIYesWindow.UIYesButton
            Dim uINameEdit As WinEdit = Me.UIOpenWindow.UIItemWindow.UISavetestsprdListItem.UINameEdit
            Dim uIOpenButton As WinButton = Me.UIOpenWindow.UIOpenWindow1.UIOpenButton

            'Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, New Point(58, 12))

            'Click '&Yes' button
            Mouse.Click(uIYesButton, New Point(63, 20))

            'Click 'Name' text box
            Mouse.Click(uINameEdit, New Point(29, 5))

            'Click '&Open' button
            Mouse.Click(uIOpenButton, New Point(74, 18))
        End Sub
        
        '''<summary>
        '''saveLoadClose
        '''</summary>
        Public Sub saveLoadClose()
            Dim uICloseButton As WinButton = Me.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton

            'Click 'Close' button
            Mouse.Click(uICloseButton, New Point(31, 7))
        End Sub
        
        '''<summary>
        '''saveLoadAssertPart1 - Use 'saveLoadAssertPart1ExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub saveLoadAssertPart1()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Verify that the 'Text' property of text box equals 'test1'
            Assert.AreEqual(Me.saveLoadAssertPart1ExpectedValues.UIItemEditText, uIItemEdit.Text)
        End Sub
        
        '''<summary>
        '''saveLoadAssertPart2 - Use 'saveLoadAssertPart2ExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub saveLoadAssertPart2()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Verify that the 'Text' property of text box equals 'test2'
            Assert.AreEqual(Me.saveLoadAssertPart2ExpectedValues.UIItemEditText, uIItemEdit.Text)
        End Sub
        
        '''<summary>
        '''saveLoadTestPart4
        '''</summary>
        Public Sub saveLoadTestPart4()
            Dim uIOpenMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem
            Dim uIYesButton As WinButton = Me.UIDataLossWarningWindow.UIYesWindow.UIYesButton
            Dim uINameEdit As WinEdit = Me.UIOpenWindow.UIItemWindow.UISavetestsprdListItem.UINameEdit
            Dim uIOpenButton As WinButton = Me.UIOpenWindow.UIOpenWindow1.UIOpenButton

            'Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, New Point(55, 9))

            'Click '&Yes' button
            Mouse.Click(uIYesButton, New Point(44, 17))

            'Click 'Name' text box
            Mouse.Click(uINameEdit, New Point(47, 9))

            'Click '&Open' button
            Mouse.Click(uIOpenButton, New Point(55, 19))
        End Sub
        
        '''<summary>
        '''saveLoadAssertPart3 - Use 'saveLoadAssertPart3ExpectedValues' to pass parameters into this method.
        '''</summary>
        Public Sub saveLoadAssertPart3()
            Dim uIItemEdit As WinEdit = Me.UISpreadsheetWindow.UIItemWindow1.UIItemEdit

            'Verify that the 'Text' property of text box equals 'test1'
            Assert.AreEqual(Me.saveLoadAssertPart3ExpectedValues.UIItemEditText, uIItemEdit.Text)
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property HelpMenuTestParams() As HelpMenuTestParams
            Get
                If (Me.mHelpMenuTestParams Is Nothing) Then
                    Me.mHelpMenuTestParams = New HelpMenuTestParams()
                End If
                Return Me.mHelpMenuTestParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property InputDoubleParams() As InputDoubleParams
            Get
                If (Me.mInputDoubleParams Is Nothing) Then
                    Me.mInputDoubleParams = New InputDoubleParams()
                End If
                Return Me.mInputDoubleParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property InputStringParams() As InputStringParams
            Get
                If (Me.mInputStringParams Is Nothing) Then
                    Me.mInputStringParams = New InputStringParams()
                End If
                Return Me.mInputStringParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property InputFormulaParams() As InputFormulaParams
            Get
                If (Me.mInputFormulaParams Is Nothing) Then
                    Me.mInputFormulaParams = New InputFormulaParams()
                End If
                Return Me.mInputFormulaParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property InputFormulaErrorParams() As InputFormulaErrorParams
            Get
                If (Me.mInputFormulaErrorParams Is Nothing) Then
                    Me.mInputFormulaErrorParams = New InputFormulaErrorParams()
                End If
                Return Me.mInputFormulaErrorParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property AssertDoubleCheckExpectedValues() As AssertDoubleCheckExpectedValues
            Get
                If (Me.mAssertDoubleCheckExpectedValues Is Nothing) Then
                    Me.mAssertDoubleCheckExpectedValues = New AssertDoubleCheckExpectedValues()
                End If
                Return Me.mAssertDoubleCheckExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property AssertStringCheckExpectedValues() As AssertStringCheckExpectedValues
            Get
                If (Me.mAssertStringCheckExpectedValues Is Nothing) Then
                    Me.mAssertStringCheckExpectedValues = New AssertStringCheckExpectedValues()
                End If
                Return Me.mAssertStringCheckExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property AssertFormulaCheckExpectedValues() As AssertFormulaCheckExpectedValues
            Get
                If (Me.mAssertFormulaCheckExpectedValues Is Nothing) Then
                    Me.mAssertFormulaCheckExpectedValues = New AssertFormulaCheckExpectedValues()
                End If
                Return Me.mAssertFormulaCheckExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property AssertFormulaErrorCheckExpectedValues() As AssertFormulaErrorCheckExpectedValues
            Get
                If (Me.mAssertFormulaErrorCheckExpectedValues Is Nothing) Then
                    Me.mAssertFormulaErrorCheckExpectedValues = New AssertFormulaErrorCheckExpectedValues()
                End If
                Return Me.mAssertFormulaErrorCheckExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property MenuNewCloseParams() As MenuNewCloseParams
            Get
                If (Me.mMenuNewCloseParams Is Nothing) Then
                    Me.mMenuNewCloseParams = New MenuNewCloseParams()
                End If
                Return Me.mMenuNewCloseParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property undoRedoTestPart1Params() As undoRedoTestPart1Params
            Get
                If (Me.mundoRedoTestPart1Params Is Nothing) Then
                    Me.mundoRedoTestPart1Params = New undoRedoTestPart1Params()
                End If
                Return Me.mundoRedoTestPart1Params
            End Get
        End Property
        
        Public Overridable ReadOnly Property undoRedoAssertPart1ExpectedValues() As undoRedoAssertPart1ExpectedValues
            Get
                If (Me.mundoRedoAssertPart1ExpectedValues Is Nothing) Then
                    Me.mundoRedoAssertPart1ExpectedValues = New undoRedoAssertPart1ExpectedValues()
                End If
                Return Me.mundoRedoAssertPart1ExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property undoRedoTestPart2Params() As undoRedoTestPart2Params
            Get
                If (Me.mundoRedoTestPart2Params Is Nothing) Then
                    Me.mundoRedoTestPart2Params = New undoRedoTestPart2Params()
                End If
                Return Me.mundoRedoTestPart2Params
            End Get
        End Property
        
        Public Overridable ReadOnly Property undoRedoAssertPart2ExpectedValues() As undoRedoAssertPart2ExpectedValues
            Get
                If (Me.mundoRedoAssertPart2ExpectedValues Is Nothing) Then
                    Me.mundoRedoAssertPart2ExpectedValues = New undoRedoAssertPart2ExpectedValues()
                End If
                Return Me.mundoRedoAssertPart2ExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property undoRedoTestPart3Params() As undoRedoTestPart3Params
            Get
                If (Me.mundoRedoTestPart3Params Is Nothing) Then
                    Me.mundoRedoTestPart3Params = New undoRedoTestPart3Params()
                End If
                Return Me.mundoRedoTestPart3Params
            End Get
        End Property
        
        Public Overridable ReadOnly Property undoRedoAssertPart3ExpectedValues() As undoRedoAssertPart3ExpectedValues
            Get
                If (Me.mundoRedoAssertPart3ExpectedValues Is Nothing) Then
                    Me.mundoRedoAssertPart3ExpectedValues = New undoRedoAssertPart3ExpectedValues()
                End If
                Return Me.mundoRedoAssertPart3ExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property saveLoadTestPart1Params() As saveLoadTestPart1Params
            Get
                If (Me.msaveLoadTestPart1Params Is Nothing) Then
                    Me.msaveLoadTestPart1Params = New saveLoadTestPart1Params()
                End If
                Return Me.msaveLoadTestPart1Params
            End Get
        End Property
        
        Public Overridable ReadOnly Property saveLoadTestPart2Params() As saveLoadTestPart2Params
            Get
                If (Me.msaveLoadTestPart2Params Is Nothing) Then
                    Me.msaveLoadTestPart2Params = New saveLoadTestPart2Params()
                End If
                Return Me.msaveLoadTestPart2Params
            End Get
        End Property
        
        Public Overridable ReadOnly Property saveLoadAssertPart1ExpectedValues() As saveLoadAssertPart1ExpectedValues
            Get
                If (Me.msaveLoadAssertPart1ExpectedValues Is Nothing) Then
                    Me.msaveLoadAssertPart1ExpectedValues = New saveLoadAssertPart1ExpectedValues()
                End If
                Return Me.msaveLoadAssertPart1ExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property saveLoadAssertPart2ExpectedValues() As saveLoadAssertPart2ExpectedValues
            Get
                If (Me.msaveLoadAssertPart2ExpectedValues Is Nothing) Then
                    Me.msaveLoadAssertPart2ExpectedValues = New saveLoadAssertPart2ExpectedValues()
                End If
                Return Me.msaveLoadAssertPart2ExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property saveLoadAssertPart3ExpectedValues() As saveLoadAssertPart3ExpectedValues
            Get
                If (Me.msaveLoadAssertPart3ExpectedValues Is Nothing) Then
                    Me.msaveLoadAssertPart3ExpectedValues = New saveLoadAssertPart3ExpectedValues()
                End If
                Return Me.msaveLoadAssertPart3ExpectedValues
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetWindow() As UISpreadsheetWindow
            Get
                If (Me.mUISpreadsheetWindow Is Nothing) Then
                    Me.mUISpreadsheetWindow = New UISpreadsheetWindow()
                End If
                Return Me.mUISpreadsheetWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOKWindow() As UIOKWindow
            Get
                If (Me.mUIOKWindow Is Nothing) Then
                    Me.mUIOKWindow = New UIOKWindow()
                End If
                Return Me.mUIOKWindow
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetWindow1() As UISpreadsheetWindow1
            Get
                If (Me.mUISpreadsheetWindow1 Is Nothing) Then
                    Me.mUISpreadsheetWindow1 = New UISpreadsheetWindow1()
                End If
                Return Me.mUISpreadsheetWindow1
            End Get
        End Property
        
        Public ReadOnly Property UIDataLossWarningWindow() As UIDataLossWarningWindow
            Get
                If (Me.mUIDataLossWarningWindow Is Nothing) Then
                    Me.mUIDataLossWarningWindow = New UIDataLossWarningWindow()
                End If
                Return Me.mUIDataLossWarningWindow
            End Get
        End Property
        
        Public ReadOnly Property UISaveAsWindow() As UISaveAsWindow
            Get
                If (Me.mUISaveAsWindow Is Nothing) Then
                    Me.mUISaveAsWindow = New UISaveAsWindow()
                End If
                Return Me.mUISaveAsWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOpenWindow() As UIOpenWindow
            Get
                If (Me.mUIOpenWindow Is Nothing) Then
                    Me.mUIOpenWindow = New UIOpenWindow()
                End If
                Return Me.mUIOpenWindow
            End Get
        End Property
        
        Public ReadOnly Property UIConfirmSaveAsWindow() As UIConfirmSaveAsWindow
            Get
                If (Me.mUIConfirmSaveAsWindow Is Nothing) Then
                    Me.mUIConfirmSaveAsWindow = New UIConfirmSaveAsWindow()
                End If
                Return Me.mUIConfirmSaveAsWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOverwriteWarningWindow() As UIOverwriteWarningWindow
            Get
                If (Me.mUIOverwriteWarningWindow Is Nothing) Then
                    Me.mUIOverwriteWarningWindow = New UIOverwriteWarningWindow()
                End If
                Return Me.mUIOverwriteWarningWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mHelpMenuTestParams As HelpMenuTestParams
        
        Private mInputDoubleParams As InputDoubleParams
        
        Private mInputStringParams As InputStringParams
        
        Private mInputFormulaParams As InputFormulaParams
        
        Private mInputFormulaErrorParams As InputFormulaErrorParams
        
        Private mAssertDoubleCheckExpectedValues As AssertDoubleCheckExpectedValues
        
        Private mAssertStringCheckExpectedValues As AssertStringCheckExpectedValues
        
        Private mAssertFormulaCheckExpectedValues As AssertFormulaCheckExpectedValues
        
        Private mAssertFormulaErrorCheckExpectedValues As AssertFormulaErrorCheckExpectedValues
        
        Private mMenuNewCloseParams As MenuNewCloseParams
        
        Private mundoRedoTestPart1Params As undoRedoTestPart1Params
        
        Private mundoRedoAssertPart1ExpectedValues As undoRedoAssertPart1ExpectedValues
        
        Private mundoRedoTestPart2Params As undoRedoTestPart2Params
        
        Private mundoRedoAssertPart2ExpectedValues As undoRedoAssertPart2ExpectedValues
        
        Private mundoRedoTestPart3Params As undoRedoTestPart3Params
        
        Private mundoRedoAssertPart3ExpectedValues As undoRedoAssertPart3ExpectedValues
        
        Private msaveLoadTestPart1Params As saveLoadTestPart1Params
        
        Private msaveLoadTestPart2Params As saveLoadTestPart2Params
        
        Private msaveLoadAssertPart1ExpectedValues As saveLoadAssertPart1ExpectedValues
        
        Private msaveLoadAssertPart2ExpectedValues As saveLoadAssertPart2ExpectedValues
        
        Private msaveLoadAssertPart3ExpectedValues As saveLoadAssertPart3ExpectedValues
        
        Private mUISpreadsheetWindow As UISpreadsheetWindow
        
        Private mUIOKWindow As UIOKWindow
        
        Private mUISpreadsheetWindow1 As UISpreadsheetWindow1
        
        Private mUIDataLossWarningWindow As UIDataLossWarningWindow
        
        Private mUISaveAsWindow As UISaveAsWindow
        
        Private mUIOpenWindow As UIOpenWindow
        
        Private mUIConfirmSaveAsWindow As UIConfirmSaveAsWindow
        
        Private mUIOverwriteWarningWindow As UIOverwriteWarningWindow
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'HelpMenuTest'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class HelpMenuTestParams
        
        #Region "Fields"
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowExePath As String = "C:\Users\DrOsw_000\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\D"& _ 
            "ebug\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowAlternateExePath As String = "%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\"& _ 
            "SpreadsheetGUI.exe"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'InputDouble'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class InputDoubleParams
        
        #Region "Fields"
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowExePath As String = "C:\Users\DrOsw_000\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\D"& _ 
            "ebug\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowAlternateExePath As String = "%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\"& _ 
            "SpreadsheetGUI.exe"
        
        '''<summary>
        '''Type '1' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "1"
        
        '''<summary>
        '''Type '1' in text box
        '''</summary>
        Public UIItemEditText As String = "1"
        
        '''<summary>
        '''Type '{Right}{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys As String = "{Right}{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'InputString'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class InputStringParams
        
        #Region "Fields"
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "t"
        
        '''<summary>
        '''Type 'test' in text box
        '''</summary>
        Public UIItemEditText As String = "test"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'InputFormula'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class InputFormulaParams
        
        #Region "Fields"
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "t"
        
        '''<summary>
        '''Type '=C4+1' in text box
        '''</summary>
        Public UIItemEditText As String = "=C4+1"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'InputFormulaError'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class InputFormulaErrorParams
        
        #Region "Fields"
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "t"
        
        '''<summary>
        '''Type '=' in text box
        '''</summary>
        Public UIItemEditText As String = "="
        
        '''<summary>
        '''Type '=D4+1' in text box
        '''</summary>
        Public UIItemEditText1 As String = "=D4+1"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'AssertDoubleCheck'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class AssertDoubleCheckExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals '1'
        '''</summary>
        Public UIItemEditText As String = "1"
        
        '''<summary>
        '''Verify that the 'Name' property of 'Cell Value: 1' label equals 'Cell Value: 1'
        '''</summary>
        Public UICellValue1TextName As String = "Cell Value: 1"
        
        '''<summary>
        '''Verify that the 'Name' property of 'Cell Selected: C4' label equals 'Cell Selected: C4'
        '''</summary>
        Public UICellSelectedC4TextName As String = "Cell Selected: C4"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'AssertStringCheck'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class AssertStringCheckExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals 'test'
        '''</summary>
        Public UIItemEditText As String = "test"
        
        '''<summary>
        '''Verify that the 'Name' property of 'Cell Value: test' label equals 'Cell Value: test'
        '''</summary>
        Public UICellValuetestTextName As String = "Cell Value: test"
        
        '''<summary>
        '''Verify that the 'Name' property of 'Cell Selected: D4' label equals 'Cell Selected: D4'
        '''</summary>
        Public UICellSelectedD4TextName As String = "Cell Selected: D4"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'AssertFormulaCheck'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class AssertFormulaCheckExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals '=C4+1'
        '''</summary>
        Public UIItemEditText As String = "=C4+1"
        
        '''<summary>
        '''Verify that the 'Name' property of 'Cell Value: 2' label equals 'Cell Value: 2'
        '''</summary>
        Public UICellValue2TextName As String = "Cell Value: 2"
        
        '''<summary>
        '''Verify that the 'Name' property of 'Cell Selected: E4' label equals 'Cell Selected: E4'
        '''</summary>
        Public UICellSelectedE4TextName As String = "Cell Selected: E4"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'AssertFormulaErrorCheck'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class AssertFormulaErrorCheckExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals '=D4+1'
        '''</summary>
        Public UIItemEditText As String = "=D4+1"
        
        '''<summary>
        '''Verify that the 'Name' property of 'Invalid Formula' label equals 'Invalid Formula'
        '''</summary>
        Public UIInvalidFormulaTextName As String = "Invalid Formula"
        
        '''<summary>
        '''Verify that the 'Name' property of 'Cell Selected: F4' label equals 'Cell Selected: F4'
        '''</summary>
        Public UICellSelectedF4TextName As String = "Cell Selected: F4"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'MenuNewClose'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class MenuNewCloseParams
        
        #Region "Fields"
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowExePath As String = "C:\Users\DrOsw_000\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\D"& _ 
            "ebug\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowAlternateExePath As String = "%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\"& _ 
            "SpreadsheetGUI.exe"
        
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "t"
        
        '''<summary>
        '''Type '=1+1' in text box
        '''</summary>
        Public UIItemEditText As String = "=1+1"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys As String = "{Enter}"
        
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys1 As String = "t"
        
        '''<summary>
        '''Type 'ttest' in text box
        '''</summary>
        Public UIItemEditText1 As String = "ttest"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys1 As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'undoRedoTestPart1'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class undoRedoTestPart1Params
        
        #Region "Fields"
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowExePath As String = "C:\Users\DrOsw_000\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\D"& _ 
            "ebug\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowAlternateExePath As String = "%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\"& _ 
            "SpreadsheetGUI.exe"
        
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "t"
        
        '''<summary>
        '''Type 'test' in text box
        '''</summary>
        Public UIItemEditText As String = "test"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys As String = "{Enter}"
        
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys1 As String = "t"
        
        '''<summary>
        '''Type 'test2' in text box
        '''</summary>
        Public UIItemEditText1 As String = "test2"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys1 As String = "{Enter}"
        
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys2 As String = "t"
        
        '''<summary>
        '''Type 'test3' in text box
        '''</summary>
        Public UIItemEditText2 As String = "test3"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys2 As String = "{Enter}"
        
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys3 As String = "t"
        
        '''<summary>
        '''Type 'test4' in text box
        '''</summary>
        Public UIItemEditText3 As String = "test4"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys3 As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'undoRedoAssertPart1'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class undoRedoAssertPart1ExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals 'test3'
        '''</summary>
        Public UIItemEditText As String = "test3"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'undoRedoTestPart2'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class undoRedoTestPart2Params
        
        #Region "Fields"
        '''<summary>
        '''Type 'Control + z' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "z"
        
        '''<summary>
        '''Type 'Control + z' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys1 As String = "z"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'undoRedoAssertPart2'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class undoRedoAssertPart2ExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals 'test2'
        '''</summary>
        Public UIItemEditText As String = "test2"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'undoRedoTestPart3'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class undoRedoTestPart3Params
        
        #Region "Fields"
        '''<summary>
        '''Type 'Control + y' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "y"
        
        '''<summary>
        '''Type 'Control + y' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys1 As String = "y"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'undoRedoAssertPart3'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class undoRedoAssertPart3ExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals 'test4'
        '''</summary>
        Public UIItemEditText As String = "test4"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'saveLoadTestPart1'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class saveLoadTestPart1Params
        
        #Region "Fields"
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowExePath As String = "C:\Users\DrOsw_000\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\D"& _ 
            "ebug\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowAlternateExePath As String = "%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\"& _ 
            "SpreadsheetGUI.exe"
        
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "t"
        
        '''<summary>
        '''Type 'test1' in text box
        '''</summary>
        Public UIItemEditText As String = "test1"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys As String = "{Enter}"
        
        '''<summary>
        '''Select 'savetest' in 'File name:' combo box
        '''</summary>
        Public UIFilenameComboBoxEditableItem As String = "savetest"
        
        '''<summary>
        '''Type '{Enter}' in 'File name:' text box
        '''</summary>
        Public UIFilenameEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'saveLoadTestPart2'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class saveLoadTestPart2Params
        
        #Region "Fields"
        '''<summary>
        '''Type 't' in 'spreadsheetPanel1' client
        '''</summary>
        Public UISpreadsheetPanel1ClientSendKeys As String = "t"
        
        '''<summary>
        '''Type 'test2' in text box
        '''</summary>
        Public UIItemEditText As String = "test2"
        
        '''<summary>
        '''Type '{Enter}' in text box
        '''</summary>
        Public UIItemEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'saveLoadAssertPart1'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class saveLoadAssertPart1ExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals 'test1'
        '''</summary>
        Public UIItemEditText As String = "test1"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'saveLoadAssertPart2'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class saveLoadAssertPart2ExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals 'test2'
        '''</summary>
        Public UIItemEditText As String = "test2"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'saveLoadAssertPart3'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class saveLoadAssertPart3ExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of text box equals 'test1'
        '''</summary>
        Public UIItemEditText As String = "test1"
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISpreadsheetWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Spreadsheet"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIMenuStrip1MenuBar() As UIMenuStrip1MenuBar
            Get
                If (Me.mUIMenuStrip1MenuBar Is Nothing) Then
                    Me.mUIMenuStrip1MenuBar = New UIMenuStrip1MenuBar(Me)
                End If
                Return Me.mUIMenuStrip1MenuBar
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetTitleBar() As UISpreadsheetTitleBar
            Get
                If (Me.mUISpreadsheetTitleBar Is Nothing) Then
                    Me.mUISpreadsheetTitleBar = New UISpreadsheetTitleBar(Me)
                End If
                Return Me.mUISpreadsheetTitleBar
            End Get
        End Property
        
        Public ReadOnly Property UIItemWindow() As UIItemWindow
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow(Me)
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        
        Public ReadOnly Property UIItemWindow1() As UIItemWindow1
            Get
                If (Me.mUIItemWindow1 Is Nothing) Then
                    Me.mUIItemWindow1 = New UIItemWindow1(Me)
                End If
                Return Me.mUIItemWindow1
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetPanel1Window() As UISpreadsheetPanel1Window
            Get
                If (Me.mUISpreadsheetPanel1Window Is Nothing) Then
                    Me.mUISpreadsheetPanel1Window = New UISpreadsheetPanel1Window(Me)
                End If
                Return Me.mUISpreadsheetPanel1Window
            End Get
        End Property
        
        Public ReadOnly Property UIToolStrip1ToolBar() As UIToolStrip1ToolBar
            Get
                If (Me.mUIToolStrip1ToolBar Is Nothing) Then
                    Me.mUIToolStrip1ToolBar = New UIToolStrip1ToolBar(Me)
                End If
                Return Me.mUIToolStrip1ToolBar
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIMenuStrip1MenuBar As UIMenuStrip1MenuBar
        
        Private mUISpreadsheetTitleBar As UISpreadsheetTitleBar
        
        Private mUIItemWindow As UIItemWindow
        
        Private mUIItemWindow1 As UIItemWindow1
        
        Private mUISpreadsheetPanel1Window As UISpreadsheetPanel1Window
        
        Private mUIToolStrip1ToolBar As UIToolStrip1ToolBar
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIMenuStrip1MenuBar
        Inherits WinMenuBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenu.PropertyNames.Name) = "menuStrip1"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIHelpMenuItem() As UIHelpMenuItem
            Get
                If (Me.mUIHelpMenuItem Is Nothing) Then
                    Me.mUIHelpMenuItem = New UIHelpMenuItem(Me)
                End If
                Return Me.mUIHelpMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UIFileMenuItem() As UIFileMenuItem
            Get
                If (Me.mUIFileMenuItem Is Nothing) Then
                    Me.mUIFileMenuItem = New UIFileMenuItem(Me)
                End If
                Return Me.mUIFileMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIHelpMenuItem As UIHelpMenuItem
        
        Private mUIFileMenuItem As UIFileMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIHelpMenuItem
        Inherits WinMenuItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenuItem.PropertyNames.Name) = "Help"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISelectNewCellMenuItem() As WinMenuItem
            Get
                If (Me.mUISelectNewCellMenuItem Is Nothing) Then
                    Me.mUISelectNewCellMenuItem = New WinMenuItem(Me)
                    Me.mUISelectNewCellMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Select New Cell"
                    Me.mUISelectNewCellMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUISelectNewCellMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUISelectNewCellMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UIEditCellContentsMenuItem() As WinMenuItem
            Get
                If (Me.mUIEditCellContentsMenuItem Is Nothing) Then
                    Me.mUIEditCellContentsMenuItem = New WinMenuItem(Me)
                    Me.mUIEditCellContentsMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Edit Cell Contents"
                    Me.mUIEditCellContentsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUIEditCellContentsMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUIEditCellContentsMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UIUndoRedoMenuItem() As WinMenuItem
            Get
                If (Me.mUIUndoRedoMenuItem Is Nothing) Then
                    Me.mUIUndoRedoMenuItem = New WinMenuItem(Me)
                    Me.mUIUndoRedoMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Undo/Redo"
                    Me.mUIUndoRedoMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUIUndoRedoMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUIUndoRedoMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISelectNewCellMenuItem As WinMenuItem
        
        Private mUIEditCellContentsMenuItem As WinMenuItem
        
        Private mUIUndoRedoMenuItem As WinMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIFileMenuItem
        Inherits WinMenuItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenuItem.PropertyNames.Name) = "File"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINewMenuItem() As WinMenuItem
            Get
                If (Me.mUINewMenuItem Is Nothing) Then
                    Me.mUINewMenuItem = New WinMenuItem(Me)
                    Me.mUINewMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "New"
                    Me.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUINewMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUINewMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UICloseMenuItem() As WinMenuItem
            Get
                If (Me.mUICloseMenuItem Is Nothing) Then
                    Me.mUICloseMenuItem = New WinMenuItem(Me)
                    Me.mUICloseMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Close"
                    Me.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUICloseMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICloseMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UISaveMenuItem() As WinMenuItem
            Get
                If (Me.mUISaveMenuItem Is Nothing) Then
                    Me.mUISaveMenuItem = New WinMenuItem(Me)
                    Me.mUISaveMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Save"
                    Me.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUISaveMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUISaveMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UIOpenMenuItem() As WinMenuItem
            Get
                If (Me.mUIOpenMenuItem Is Nothing) Then
                    Me.mUIOpenMenuItem = New WinMenuItem(Me)
                    Me.mUIOpenMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Open"
                    Me.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUIOpenMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINewMenuItem As WinMenuItem
        
        Private mUICloseMenuItem As WinMenuItem
        
        Private mUISaveMenuItem As WinMenuItem
        
        Private mUIOpenMenuItem As WinMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISpreadsheetTitleBar
        Inherits WinTitleBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICloseButton() As WinButton
            Get
                If (Me.mUICloseButton Is Nothing) Then
                    Me.mUICloseButton = New WinButton(Me)
                    Me.mUICloseButton.SearchProperties(WinButton.PropertyNames.Name) = "Close"
                    Me.mUICloseButton.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICloseButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICloseButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIItemWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.SearchProperties(WinWindow.PropertyNames.Instance) = "4"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISpreadsheetPanel1Client() As WinClient
            Get
                If (Me.mUISpreadsheetPanel1Client Is Nothing) Then
                    Me.mUISpreadsheetPanel1Client = New WinClient(Me)
                    Me.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUISpreadsheetPanel1Client
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISpreadsheetPanel1Client As WinClient
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIItemWindow1
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemEdit() As WinEdit
            Get
                If (Me.mUIItemEdit Is Nothing) Then
                    Me.mUIItemEdit = New WinEdit(Me)
                    Me.mUIItemEdit.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUIItemEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISpreadsheetPanel1Window
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "spreadsheetPanel1"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISpreadsheetPanel1Client() As WinClient
            Get
                If (Me.mUISpreadsheetPanel1Client Is Nothing) Then
                    Me.mUISpreadsheetPanel1Client = New WinClient(Me)
                    Me.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUISpreadsheetPanel1Client
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISpreadsheetPanel1Client As WinClient
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIToolStrip1ToolBar
        Inherits WinToolBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinToolBar.PropertyNames.Name) = "toolStrip1"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICellValue1Text() As WinText
            Get
                If (Me.mUICellValue1Text Is Nothing) Then
                    Me.mUICellValue1Text = New WinText(Me)
                    Me.mUICellValue1Text.SearchProperties(WinText.PropertyNames.Name) = "Cell Value: 1"
                    Me.mUICellValue1Text.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICellValue1Text
            End Get
        End Property
        
        Public ReadOnly Property UICellSelectedC4Text() As WinText
            Get
                If (Me.mUICellSelectedC4Text Is Nothing) Then
                    Me.mUICellSelectedC4Text = New WinText(Me)
                    Me.mUICellSelectedC4Text.SearchProperties(WinText.PropertyNames.Name) = "Cell Selected: C4"
                    Me.mUICellSelectedC4Text.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICellSelectedC4Text
            End Get
        End Property
        
        Public ReadOnly Property UICellValuetestText() As WinText
            Get
                If (Me.mUICellValuetestText Is Nothing) Then
                    Me.mUICellValuetestText = New WinText(Me)
                    Me.mUICellValuetestText.SearchProperties(WinText.PropertyNames.Name) = "Cell Value: test"
                    Me.mUICellValuetestText.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICellValuetestText
            End Get
        End Property
        
        Public ReadOnly Property UICellSelectedD4Text() As WinText
            Get
                If (Me.mUICellSelectedD4Text Is Nothing) Then
                    Me.mUICellSelectedD4Text = New WinText(Me)
                    Me.mUICellSelectedD4Text.SearchProperties(WinText.PropertyNames.Name) = "Cell Selected: D4"
                    Me.mUICellSelectedD4Text.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICellSelectedD4Text
            End Get
        End Property
        
        Public ReadOnly Property UICellValue2Text() As WinText
            Get
                If (Me.mUICellValue2Text Is Nothing) Then
                    Me.mUICellValue2Text = New WinText(Me)
                    Me.mUICellValue2Text.SearchProperties(WinText.PropertyNames.Name) = "Cell Value: 2"
                    Me.mUICellValue2Text.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICellValue2Text
            End Get
        End Property
        
        Public ReadOnly Property UICellSelectedE4Text() As WinText
            Get
                If (Me.mUICellSelectedE4Text Is Nothing) Then
                    Me.mUICellSelectedE4Text = New WinText(Me)
                    Me.mUICellSelectedE4Text.SearchProperties(WinText.PropertyNames.Name) = "Cell Selected: E4"
                    Me.mUICellSelectedE4Text.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICellSelectedE4Text
            End Get
        End Property
        
        Public ReadOnly Property UIInvalidFormulaText() As WinText
            Get
                If (Me.mUIInvalidFormulaText Is Nothing) Then
                    Me.mUIInvalidFormulaText = New WinText(Me)
                    Me.mUIInvalidFormulaText.SearchProperties(WinText.PropertyNames.Name) = "Invalid Formula"
                    Me.mUIInvalidFormulaText.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUIInvalidFormulaText
            End Get
        End Property
        
        Public ReadOnly Property UICellSelectedF4Text() As WinText
            Get
                If (Me.mUICellSelectedF4Text Is Nothing) Then
                    Me.mUICellSelectedF4Text = New WinText(Me)
                    Me.mUICellSelectedF4Text.SearchProperties(WinText.PropertyNames.Name) = "Cell Selected: F4"
                    Me.mUICellSelectedF4Text.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICellSelectedF4Text
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICellValue1Text As WinText
        
        Private mUICellSelectedC4Text As WinText
        
        Private mUICellValuetestText As WinText
        
        Private mUICellSelectedD4Text As WinText
        
        Private mUICellValue2Text As WinText
        
        Private mUICellSelectedE4Text As WinText
        
        Private mUIInvalidFormulaText As WinText
        
        Private mUICellSelectedF4Text As WinText
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIOKWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "OK"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "Button"
            Me.WindowTitles.Add("OK")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOKButton() As WinButton
            Get
                If (Me.mUIOKButton Is Nothing) Then
                    Me.mUIOKButton = New WinButton(Me)
                    Me.mUIOKButton.SearchProperties(WinButton.PropertyNames.Name) = "OK"
                    Me.mUIOKButton.WindowTitles.Add("OK")
                End If
                Return Me.mUIOKButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOKButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISpreadsheetWindow1
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Spreadsheet"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.FilterProperties(WinWindow.PropertyNames.OrderOfInvocation) = "2"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemWindow() As UIItemWindow2
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow2(Me)
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetTitleBar() As UISpreadsheetTitleBar1
            Get
                If (Me.mUISpreadsheetTitleBar Is Nothing) Then
                    Me.mUISpreadsheetTitleBar = New UISpreadsheetTitleBar1(Me)
                End If
                Return Me.mUISpreadsheetTitleBar
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemWindow As UIItemWindow2
        
        Private mUISpreadsheetTitleBar As UISpreadsheetTitleBar1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIItemWindow2
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.SearchProperties(WinWindow.PropertyNames.Instance) = "4"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISpreadsheetPanel1Client() As WinClient
            Get
                If (Me.mUISpreadsheetPanel1Client Is Nothing) Then
                    Me.mUISpreadsheetPanel1Client = New WinClient(Me)
                    Me.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUISpreadsheetPanel1Client
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISpreadsheetPanel1Client As WinClient
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISpreadsheetTitleBar1
        Inherits WinTitleBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICloseButton() As WinButton
            Get
                If (Me.mUICloseButton Is Nothing) Then
                    Me.mUICloseButton = New WinButton(Me)
                    Me.mUICloseButton.SearchProperties(WinButton.PropertyNames.Name) = "Close"
                    Me.mUICloseButton.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICloseButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICloseButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIDataLossWarningWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Data Loss Warning"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Data Loss Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIYesWindow() As UIYesWindow
            Get
                If (Me.mUIYesWindow Is Nothing) Then
                    Me.mUIYesWindow = New UIYesWindow(Me)
                End If
                Return Me.mUIYesWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIYesWindow As UIYesWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIYesWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlId) = "6"
            Me.WindowTitles.Add("Data Loss Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIYesButton() As WinButton
            Get
                If (Me.mUIYesButton Is Nothing) Then
                    Me.mUIYesButton = New WinButton(Me)
                    Me.mUIYesButton.SearchProperties(WinButton.PropertyNames.Name) = "Yes"
                    Me.mUIYesButton.WindowTitles.Add("Data Loss Warning")
                End If
                Return Me.mUIYesButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIYesButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISaveAsWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Save As"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIDetailsPanePane() As UIDetailsPanePane
            Get
                If (Me.mUIDetailsPanePane Is Nothing) Then
                    Me.mUIDetailsPanePane = New UIDetailsPanePane(Me)
                End If
                Return Me.mUIDetailsPanePane
            End Get
        End Property
        
        Public ReadOnly Property UISaveWindow() As UISaveWindow
            Get
                If (Me.mUISaveWindow Is Nothing) Then
                    Me.mUISaveWindow = New UISaveWindow(Me)
                End If
                Return Me.mUISaveWindow
            End Get
        End Property
        
        Public ReadOnly Property UIItemWindow() As UIItemWindow3
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow3(Me)
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        
        Public ReadOnly Property UIItemWindow1() As UIItemWindow11
            Get
                If (Me.mUIItemWindow1 Is Nothing) Then
                    Me.mUIItemWindow1 = New UIItemWindow11(Me)
                End If
                Return Me.mUIItemWindow1
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIDetailsPanePane As UIDetailsPanePane
        
        Private mUISaveWindow As UISaveWindow
        
        Private mUIItemWindow As UIItemWindow3
        
        Private mUIItemWindow1 As UIItemWindow11
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIDetailsPanePane
        Inherits WinPane
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinControl.PropertyNames.Name) = "Details Pane"
            Me.WindowTitles.Add("Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIFilenameComboBox() As WinComboBox
            Get
                If (Me.mUIFilenameComboBox Is Nothing) Then
                    Me.mUIFilenameComboBox = New WinComboBox(Me)
                    Me.mUIFilenameComboBox.SearchProperties(WinComboBox.PropertyNames.Name) = "File name:"
                    Me.mUIFilenameComboBox.WindowTitles.Add("Save As")
                End If
                Return Me.mUIFilenameComboBox
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIFilenameComboBox As WinComboBox
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISaveWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlId) = "1"
            Me.WindowTitles.Add("Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISaveButton() As WinButton
            Get
                If (Me.mUISaveButton Is Nothing) Then
                    Me.mUISaveButton = New WinButton(Me)
                    Me.mUISaveButton.SearchProperties(WinButton.PropertyNames.Name) = "Save"
                    Me.mUISaveButton.WindowTitles.Add("Save As")
                End If
                Return Me.mUISaveButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISaveButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIItemWindow3
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.AccessibleName) = "Items View"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "DirectUIHWND"
            Me.WindowTitles.Add("Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISavetestsprdListItem() As UISavetestsprdListItem
            Get
                If (Me.mUISavetestsprdListItem Is Nothing) Then
                    Me.mUISavetestsprdListItem = New UISavetestsprdListItem(Me)
                End If
                Return Me.mUISavetestsprdListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISavetestsprdListItem As UISavetestsprdListItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISavetestsprdListItem
        Inherits WinListItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinListItem.PropertyNames.Name) = "savetest.sprd"
            Me.WindowTitles.Add("Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINameEdit() As WinEdit
            Get
                If (Me.mUINameEdit Is Nothing) Then
                    Me.mUINameEdit = New WinEdit(Me)
                    Me.mUINameEdit.SearchProperties(WinEdit.PropertyNames.Name) = "Name"
                    Me.mUINameEdit.WindowTitles.Add("Save As")
                End If
                Return Me.mUINameEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINameEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIItemWindow11
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlId) = "1001"
            Me.WindowTitles.Add("Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIFilenameEdit() As WinEdit
            Get
                If (Me.mUIFilenameEdit Is Nothing) Then
                    Me.mUIFilenameEdit = New WinEdit(Me)
                    Me.mUIFilenameEdit.SearchProperties(WinEdit.PropertyNames.Name) = "File name:"
                    Me.mUIFilenameEdit.WindowTitles.Add("Save As")
                End If
                Return Me.mUIFilenameEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIFilenameEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIOpenWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Open"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Open")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemWindow() As UIItemWindow4
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow4(Me)
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOpenWindow1() As UIOpenWindow1
            Get
                If (Me.mUIOpenWindow1 Is Nothing) Then
                    Me.mUIOpenWindow1 = New UIOpenWindow1(Me)
                End If
                Return Me.mUIOpenWindow1
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemWindow As UIItemWindow4
        
        Private mUIOpenWindow1 As UIOpenWindow1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIItemWindow4
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.AccessibleName) = "Items View"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "DirectUIHWND"
            Me.WindowTitles.Add("Open")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISavetestsprdListItem() As UISavetestsprdListItem1
            Get
                If (Me.mUISavetestsprdListItem Is Nothing) Then
                    Me.mUISavetestsprdListItem = New UISavetestsprdListItem1(Me)
                End If
                Return Me.mUISavetestsprdListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISavetestsprdListItem As UISavetestsprdListItem1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISavetestsprdListItem1
        Inherits WinListItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinListItem.PropertyNames.Name) = "savetest.sprd"
            Me.WindowTitles.Add("Open")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINameEdit() As WinEdit
            Get
                If (Me.mUINameEdit Is Nothing) Then
                    Me.mUINameEdit = New WinEdit(Me)
                    Me.mUINameEdit.SearchProperties(WinEdit.PropertyNames.Name) = "Name"
                    Me.mUINameEdit.WindowTitles.Add("Open")
                End If
                Return Me.mUINameEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINameEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIOpenWindow1
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlId) = "1"
            Me.WindowTitles.Add("Open")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOpenButton() As WinButton
            Get
                If (Me.mUIOpenButton Is Nothing) Then
                    Me.mUIOpenButton = New WinButton(Me)
                    Me.mUIOpenButton.SearchProperties(WinButton.PropertyNames.Name) = "Open"
                    Me.mUIOpenButton.WindowTitles.Add("Open")
                End If
                Return Me.mUIOpenButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOpenButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIConfirmSaveAsWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Confirm Save As"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Confirm Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIConfirmSaveAsPane() As UIConfirmSaveAsPane
            Get
                If (Me.mUIConfirmSaveAsPane Is Nothing) Then
                    Me.mUIConfirmSaveAsPane = New UIConfirmSaveAsPane(Me)
                End If
                Return Me.mUIConfirmSaveAsPane
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIConfirmSaveAsPane As UIConfirmSaveAsPane
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIConfirmSaveAsPane
        Inherits WinPane
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinControl.PropertyNames.Name) = "Confirm Save As"
            Me.WindowTitles.Add("Confirm Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIYesButton() As WinButton
            Get
                If (Me.mUIYesButton Is Nothing) Then
                    Me.mUIYesButton = New WinButton(Me)
                    Me.mUIYesButton.SearchProperties(WinButton.PropertyNames.Name) = "Yes"
                    Me.mUIYesButton.WindowTitles.Add("Confirm Save As")
                End If
                Return Me.mUIYesButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIYesButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIOverwriteWarningWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Overwrite Warning"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Overwrite Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIYesWindow() As UIYesWindow1
            Get
                If (Me.mUIYesWindow Is Nothing) Then
                    Me.mUIYesWindow = New UIYesWindow1(Me)
                End If
                Return Me.mUIYesWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIYesWindow As UIYesWindow1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIYesWindow1
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlId) = "6"
            Me.WindowTitles.Add("Overwrite Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIYesButton() As WinButton
            Get
                If (Me.mUIYesButton Is Nothing) Then
                    Me.mUIYesButton = New WinButton(Me)
                    Me.mUIYesButton.SearchProperties(WinButton.PropertyNames.Name) = "Yes"
                    Me.mUIYesButton.WindowTitles.Add("Overwrite Warning")
                End If
                Return Me.mUIYesButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIYesButton As WinButton
        #End Region
    End Class
End Namespace

'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 12.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace SpreadsheetUITest
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''Ensures the Help Menu does not throw any exceptions. These methods have no effect beyond simply displaying their message.
        '''</summary>
        Public Sub HelpMenuTest()
            Dim uISelectNewCellMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UISelectNewCellMenuItem
            Dim uIOKButton As WinButton = Me.UIOKWindow.UIOKButton
            Dim uIEditCellContentsMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIEditCellContentsMenuItem
            Dim uIUndoRedoMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIUndoRedoMenuItem
            Dim uICloseButton As WinButton = Me.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton

            'Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            Dim uISpreadsheetWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.HelpMenuTestParams.UISpreadsheetWindowExePath, Me.HelpMenuTestParams.UISpreadsheetWindowAlternateExePath)

            'Click 'Help' -> 'Select New Cell' menu item
            Mouse.Click(uISelectNewCellMenuItem, New Point(49, 4))

            'Click 'OK' button
            Mouse.Click(uIOKButton, New Point(66, 17))

            'Click 'Help' -> 'Edit Cell Contents' menu item
            Mouse.Click(uIEditCellContentsMenuItem, New Point(45, 4))

            'Click 'OK' button
            Mouse.Click(uIOKButton, New Point(57, 9))

            'Click 'Help' -> 'Undo/Redo' menu item
            Mouse.Click(uIUndoRedoMenuItem, New Point(57, 10))

            'Click 'OK' button
            Mouse.Click(uIOKButton, New Point(54, 10))

            'Click 'Close' button
            Mouse.Click(uICloseButton, New Point(16, 9))
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property HelpMenuTestParams() As HelpMenuTestParams
            Get
                If (Me.mHelpMenuTestParams Is Nothing) Then
                    Me.mHelpMenuTestParams = New HelpMenuTestParams()
                End If
                Return Me.mHelpMenuTestParams
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetWindow() As UISpreadsheetWindow
            Get
                If (Me.mUISpreadsheetWindow Is Nothing) Then
                    Me.mUISpreadsheetWindow = New UISpreadsheetWindow()
                End If
                Return Me.mUISpreadsheetWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOKWindow() As UIOKWindow
            Get
                If (Me.mUIOKWindow Is Nothing) Then
                    Me.mUIOKWindow = New UIOKWindow()
                End If
                Return Me.mUIOKWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mHelpMenuTestParams As HelpMenuTestParams
        
        Private mUISpreadsheetWindow As UISpreadsheetWindow
        
        Private mUIOKWindow As UIOKWindow
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'HelpMenuTest'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class HelpMenuTestParams
        
        #Region "Fields"
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowExePath As String = "C:\Users\DrOsw_000\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\D"& _ 
            "ebug\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetWindowAlternateExePath As String = "%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS4\SpreadsheetGUI\bin\Debug\"& _ 
            "SpreadsheetGUI.exe"
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISpreadsheetWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Spreadsheet"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIMenuStrip1MenuBar() As UIMenuStrip1MenuBar
            Get
                If (Me.mUIMenuStrip1MenuBar Is Nothing) Then
                    Me.mUIMenuStrip1MenuBar = New UIMenuStrip1MenuBar(Me)
                End If
                Return Me.mUIMenuStrip1MenuBar
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetTitleBar() As UISpreadsheetTitleBar
            Get
                If (Me.mUISpreadsheetTitleBar Is Nothing) Then
                    Me.mUISpreadsheetTitleBar = New UISpreadsheetTitleBar(Me)
                End If
                Return Me.mUISpreadsheetTitleBar
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIMenuStrip1MenuBar As UIMenuStrip1MenuBar
        
        Private mUISpreadsheetTitleBar As UISpreadsheetTitleBar
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIMenuStrip1MenuBar
        Inherits WinMenuBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenu.PropertyNames.Name) = "menuStrip1"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIHelpMenuItem() As UIHelpMenuItem
            Get
                If (Me.mUIHelpMenuItem Is Nothing) Then
                    Me.mUIHelpMenuItem = New UIHelpMenuItem(Me)
                End If
                Return Me.mUIHelpMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIHelpMenuItem As UIHelpMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIHelpMenuItem
        Inherits WinMenuItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenuItem.PropertyNames.Name) = "Help"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISelectNewCellMenuItem() As WinMenuItem
            Get
                If (Me.mUISelectNewCellMenuItem Is Nothing) Then
                    Me.mUISelectNewCellMenuItem = New WinMenuItem(Me)
                    Me.mUISelectNewCellMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Select New Cell"
                    Me.mUISelectNewCellMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUISelectNewCellMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUISelectNewCellMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UIEditCellContentsMenuItem() As WinMenuItem
            Get
                If (Me.mUIEditCellContentsMenuItem Is Nothing) Then
                    Me.mUIEditCellContentsMenuItem = New WinMenuItem(Me)
                    Me.mUIEditCellContentsMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Edit Cell Contents"
                    Me.mUIEditCellContentsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUIEditCellContentsMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUIEditCellContentsMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UIUndoRedoMenuItem() As WinMenuItem
            Get
                If (Me.mUIUndoRedoMenuItem Is Nothing) Then
                    Me.mUIUndoRedoMenuItem = New WinMenuItem(Me)
                    Me.mUIUndoRedoMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Undo/Redo"
                    Me.mUIUndoRedoMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUIUndoRedoMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUIUndoRedoMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISelectNewCellMenuItem As WinMenuItem
        
        Private mUIEditCellContentsMenuItem As WinMenuItem
        
        Private mUIUndoRedoMenuItem As WinMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UISpreadsheetTitleBar
        Inherits WinTitleBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICloseButton() As WinButton
            Get
                If (Me.mUICloseButton Is Nothing) Then
                    Me.mUICloseButton = New WinButton(Me)
                    Me.mUICloseButton.SearchProperties(WinButton.PropertyNames.Name) = "Close"
                    Me.mUICloseButton.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICloseButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICloseButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.21005.1")>  _
    Public Class UIOKWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "OK"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "Button"
            Me.WindowTitles.Add("OK")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOKButton() As WinButton
            Get
                If (Me.mUIOKButton Is Nothing) Then
                    Me.mUIOKButton = New WinButton(Me)
                    Me.mUIOKButton.SearchProperties(WinButton.PropertyNames.Name) = "OK"
                    Me.mUIOKButton.WindowTitles.Add("OK")
                End If
                Return Me.mUIOKButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOKButton As WinButton
        #End Region
    End Class
End Namespace
